/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { GraphQLContext } from "./../../pages/api/index"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  PaidPlan: "pro"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Project: { // root type
    id: string; // String!
    name?: string | null; // String
    slug?: string | null; // String
  }
  ProjectConnection: { // root type
    edges?: Array<NexusGenRootTypes['ProjectEdge'] | null> | null; // [ProjectEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ProjectEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Project'] | null; // Project
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // String!
    name?: string | null; // String
  }
  UserConnection: { // root type
    edges?: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createProject: NexusGenRootTypes['Project'] | null; // Project
    createStripeCheckoutBillingPortalUrl: string | null; // String
    createStripeCheckoutSession: string | null; // String
    inviteToProject: boolean | null; // Boolean
    removeUserFromProject: NexusGenRootTypes['Project'] | null; // Project
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Project: { // field return type
    id: string; // String!
    name: string | null; // String
    paidPlan: NexusGenEnums['PaidPlan'] | null; // PaidPlan
    slug: string | null; // String
    users: NexusGenRootTypes['UserConnection'] | null; // UserConnection
  }
  ProjectConnection: { // field return type
    edges: Array<NexusGenRootTypes['ProjectEdge'] | null> | null; // [ProjectEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ProjectEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Project'] | null; // Project
  }
  Query: { // field return type
    currentUser: NexusGenRootTypes['User'] | null; // User
    project: NexusGenRootTypes['Project'] | null; // Project
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    name: string | null; // String
    projects: NexusGenRootTypes['ProjectConnection'] | null; // ProjectConnection
  }
  UserConnection: { // field return type
    edges: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createProject: 'Project'
    createStripeCheckoutBillingPortalUrl: 'String'
    createStripeCheckoutSession: 'String'
    inviteToProject: 'Boolean'
    removeUserFromProject: 'Project'
    updateUser: 'User'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Project: { // field return type name
    id: 'String'
    name: 'String'
    paidPlan: 'PaidPlan'
    slug: 'String'
    users: 'UserConnection'
  }
  ProjectConnection: { // field return type name
    edges: 'ProjectEdge'
    pageInfo: 'PageInfo'
  }
  ProjectEdge: { // field return type name
    cursor: 'String'
    node: 'Project'
  }
  Query: { // field return type name
    currentUser: 'User'
    project: 'Project'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    projects: 'ProjectConnection'
  }
  UserConnection: { // field return type name
    edges: 'UserEdge'
    pageInfo: 'PageInfo'
  }
  UserEdge: { // field return type name
    cursor: 'String'
    node: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProject: { // args
      name: string; // String!
      slug?: string | null; // String
    }
    createStripeCheckoutBillingPortalUrl: { // args
      projectId: string; // String!
    }
    createStripeCheckoutSession: { // args
      plan: NexusGenEnums['PaidPlan']; // PaidPlan!
      projectId: string; // String!
    }
    inviteToProject: { // args
      email: string; // String!
      projectId: string; // String!
    }
    removeUserFromProject: { // args
      projectId: string; // String!
      userId: string; // String!
    }
    updateUser: { // args
      name?: string | null; // String
      userId: string; // String!
    }
  }
  Project: {
    users: { // args
      after?: string | null; // String
      first: number; // Int!
    }
  }
  Query: {
    project: { // args
      id?: string | null; // String
      slug?: string | null; // String
    }
  }
  User: {
    projects: { // args
      after?: string | null; // String
      first: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: GraphQLContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}